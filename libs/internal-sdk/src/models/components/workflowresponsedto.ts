/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RuntimeIssueDto,
  RuntimeIssueDto$inboundSchema,
  RuntimeIssueDto$Outbound,
  RuntimeIssueDto$outboundSchema,
} from "./runtimeissuedto.js";
import {
  StepResponseDto,
  StepResponseDto$inboundSchema,
  StepResponseDto$Outbound,
  StepResponseDto$outboundSchema,
} from "./stepresponsedto.js";
import {
  WorkflowOriginEnum,
  WorkflowOriginEnum$inboundSchema,
  WorkflowOriginEnum$outboundSchema,
} from "./workfloworiginenum.js";
import {
  WorkflowPreferencesResponseDto,
  WorkflowPreferencesResponseDto$inboundSchema,
  WorkflowPreferencesResponseDto$Outbound,
  WorkflowPreferencesResponseDto$outboundSchema,
} from "./workflowpreferencesresponsedto.js";
import {
  WorkflowStatusEnum,
  WorkflowStatusEnum$inboundSchema,
  WorkflowStatusEnum$outboundSchema,
} from "./workflowstatusenum.js";

/**
 * The payload JSON Schema for the workflow
 */
export type PayloadSchema = {};

/**
 * Generated payload example based on the payload schema
 */
export type PayloadExample = {};

export type WorkflowResponseDto = {
  /**
   * Name of the workflow
   */
  name: string;
  /**
   * Description of the workflow
   */
  description?: string | undefined;
  /**
   * Tags associated with the workflow
   */
  tags?: Array<string> | undefined;
  /**
   * Whether the workflow is active
   */
  active?: boolean | undefined;
  /**
   * Unique identifier of the workflow
   */
  id: string;
  /**
   * Workflow identifier
   */
  workflowId: string;
  /**
   * Slug of the workflow
   */
  slug: string;
  /**
   * Last updated timestamp
   */
  updatedAt: string;
  /**
   * Creation timestamp
   */
  createdAt: string;
  /**
   * Steps of the workflow
   */
  steps: Array<StepResponseDto>;
  /**
   * Origin of the workflow
   */
  origin: WorkflowOriginEnum;
  /**
   * Preferences for the workflow
   */
  preferences: WorkflowPreferencesResponseDto;
  /**
   * Status of the workflow
   */
  status: WorkflowStatusEnum;
  /**
   * Runtime issues for workflow creation and update
   */
  issues?: { [k: string]: RuntimeIssueDto } | undefined;
  /**
   * Timestamp of the last workflow trigger
   */
  lastTriggeredAt?: string | null | undefined;
  /**
   * The payload JSON Schema for the workflow
   */
  payloadSchema?: PayloadSchema | null | undefined;
  /**
   * Generated payload example based on the payload schema
   */
  payloadExample?: PayloadExample | null | undefined;
  /**
   * Whether payload schema validation is enabled
   */
  validatePayload?: boolean | undefined;
};

/** @internal */
export const PayloadSchema$inboundSchema: z.ZodType<
  PayloadSchema,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PayloadSchema$Outbound = {};

/** @internal */
export const PayloadSchema$outboundSchema: z.ZodType<
  PayloadSchema$Outbound,
  z.ZodTypeDef,
  PayloadSchema
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayloadSchema$ {
  /** @deprecated use `PayloadSchema$inboundSchema` instead. */
  export const inboundSchema = PayloadSchema$inboundSchema;
  /** @deprecated use `PayloadSchema$outboundSchema` instead. */
  export const outboundSchema = PayloadSchema$outboundSchema;
  /** @deprecated use `PayloadSchema$Outbound` instead. */
  export type Outbound = PayloadSchema$Outbound;
}

export function payloadSchemaToJSON(payloadSchema: PayloadSchema): string {
  return JSON.stringify(PayloadSchema$outboundSchema.parse(payloadSchema));
}

export function payloadSchemaFromJSON(
  jsonString: string,
): SafeParseResult<PayloadSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayloadSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayloadSchema' from JSON`,
  );
}

/** @internal */
export const PayloadExample$inboundSchema: z.ZodType<
  PayloadExample,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PayloadExample$Outbound = {};

/** @internal */
export const PayloadExample$outboundSchema: z.ZodType<
  PayloadExample$Outbound,
  z.ZodTypeDef,
  PayloadExample
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayloadExample$ {
  /** @deprecated use `PayloadExample$inboundSchema` instead. */
  export const inboundSchema = PayloadExample$inboundSchema;
  /** @deprecated use `PayloadExample$outboundSchema` instead. */
  export const outboundSchema = PayloadExample$outboundSchema;
  /** @deprecated use `PayloadExample$Outbound` instead. */
  export type Outbound = PayloadExample$Outbound;
}

export function payloadExampleToJSON(payloadExample: PayloadExample): string {
  return JSON.stringify(PayloadExample$outboundSchema.parse(payloadExample));
}

export function payloadExampleFromJSON(
  jsonString: string,
): SafeParseResult<PayloadExample, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayloadExample$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayloadExample' from JSON`,
  );
}

/** @internal */
export const WorkflowResponseDto$inboundSchema: z.ZodType<
  WorkflowResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
  active: z.boolean().default(false),
  _id: z.string(),
  workflowId: z.string(),
  slug: z.string(),
  updatedAt: z.string(),
  createdAt: z.string(),
  steps: z.array(StepResponseDto$inboundSchema),
  origin: WorkflowOriginEnum$inboundSchema,
  preferences: WorkflowPreferencesResponseDto$inboundSchema,
  status: WorkflowStatusEnum$inboundSchema,
  issues: z.record(RuntimeIssueDto$inboundSchema).optional(),
  lastTriggeredAt: z.nullable(z.string()).optional(),
  payloadSchema: z.nullable(z.lazy(() => PayloadSchema$inboundSchema))
    .optional(),
  payloadExample: z.nullable(z.lazy(() => PayloadExample$inboundSchema))
    .optional(),
  validatePayload: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type WorkflowResponseDto$Outbound = {
  name: string;
  description?: string | undefined;
  tags?: Array<string> | undefined;
  active: boolean;
  _id: string;
  workflowId: string;
  slug: string;
  updatedAt: string;
  createdAt: string;
  steps: Array<StepResponseDto$Outbound>;
  origin: string;
  preferences: WorkflowPreferencesResponseDto$Outbound;
  status: string;
  issues?: { [k: string]: RuntimeIssueDto$Outbound } | undefined;
  lastTriggeredAt?: string | null | undefined;
  payloadSchema?: PayloadSchema$Outbound | null | undefined;
  payloadExample?: PayloadExample$Outbound | null | undefined;
  validatePayload?: boolean | undefined;
};

/** @internal */
export const WorkflowResponseDto$outboundSchema: z.ZodType<
  WorkflowResponseDto$Outbound,
  z.ZodTypeDef,
  WorkflowResponseDto
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
  active: z.boolean().default(false),
  id: z.string(),
  workflowId: z.string(),
  slug: z.string(),
  updatedAt: z.string(),
  createdAt: z.string(),
  steps: z.array(StepResponseDto$outboundSchema),
  origin: WorkflowOriginEnum$outboundSchema,
  preferences: WorkflowPreferencesResponseDto$outboundSchema,
  status: WorkflowStatusEnum$outboundSchema,
  issues: z.record(RuntimeIssueDto$outboundSchema).optional(),
  lastTriggeredAt: z.nullable(z.string()).optional(),
  payloadSchema: z.nullable(z.lazy(() => PayloadSchema$outboundSchema))
    .optional(),
  payloadExample: z.nullable(z.lazy(() => PayloadExample$outboundSchema))
    .optional(),
  validatePayload: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowResponseDto$ {
  /** @deprecated use `WorkflowResponseDto$inboundSchema` instead. */
  export const inboundSchema = WorkflowResponseDto$inboundSchema;
  /** @deprecated use `WorkflowResponseDto$outboundSchema` instead. */
  export const outboundSchema = WorkflowResponseDto$outboundSchema;
  /** @deprecated use `WorkflowResponseDto$Outbound` instead. */
  export type Outbound = WorkflowResponseDto$Outbound;
}

export function workflowResponseDtoToJSON(
  workflowResponseDto: WorkflowResponseDto,
): string {
  return JSON.stringify(
    WorkflowResponseDto$outboundSchema.parse(workflowResponseDto),
  );
}

export function workflowResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowResponseDto' from JSON`,
  );
}
