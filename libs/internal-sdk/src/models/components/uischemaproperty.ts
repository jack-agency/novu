/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UiComponentEnum,
  UiComponentEnum$inboundSchema,
  UiComponentEnum$outboundSchema,
} from "./uicomponentenum.js";

export type Five = string | number | boolean | { [k: string]: any };

/**
 * Placeholder for the UI Schema Property
 */
export type Placeholder =
  | string
  | number
  | boolean
  | { [k: string]: any }
  | Array<string | number | boolean | { [k: string]: any }>;

export type UiSchemaProperty = {
  /**
   * Placeholder for the UI Schema Property
   */
  placeholder?:
    | string
    | number
    | boolean
    | { [k: string]: any }
    | Array<string | number | boolean | { [k: string]: any }>
    | null
    | undefined;
  /**
   * Component type for the UI Schema Property
   */
  component: UiComponentEnum;
  /**
   * Properties of the UI Schema
   */
  properties?: { [k: string]: UiSchemaProperty } | undefined;
};

/** @internal */
export const Five$inboundSchema: z.ZodType<Five, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number(), z.boolean(), z.record(z.any())]);

/** @internal */
export type Five$Outbound = string | number | boolean | { [k: string]: any };

/** @internal */
export const Five$outboundSchema: z.ZodType<Five$Outbound, z.ZodTypeDef, Five> =
  z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Five$ {
  /** @deprecated use `Five$inboundSchema` instead. */
  export const inboundSchema = Five$inboundSchema;
  /** @deprecated use `Five$outboundSchema` instead. */
  export const outboundSchema = Five$outboundSchema;
  /** @deprecated use `Five$Outbound` instead. */
  export type Outbound = Five$Outbound;
}

export function fiveToJSON(five: Five): string {
  return JSON.stringify(Five$outboundSchema.parse(five));
}

export function fiveFromJSON(
  jsonString: string,
): SafeParseResult<Five, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Five$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Five' from JSON`,
  );
}

/** @internal */
export const Placeholder$inboundSchema: z.ZodType<
  Placeholder,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.record(z.any()),
  z.array(z.union([z.string(), z.number(), z.boolean(), z.record(z.any())])),
]);

/** @internal */
export type Placeholder$Outbound = string | number | boolean | {
  [k: string]: any;
} | Array<string | number | boolean | { [k: string]: any }>;

/** @internal */
export const Placeholder$outboundSchema: z.ZodType<
  Placeholder$Outbound,
  z.ZodTypeDef,
  Placeholder
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.record(z.any()),
  z.array(z.union([z.string(), z.number(), z.boolean(), z.record(z.any())])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Placeholder$ {
  /** @deprecated use `Placeholder$inboundSchema` instead. */
  export const inboundSchema = Placeholder$inboundSchema;
  /** @deprecated use `Placeholder$outboundSchema` instead. */
  export const outboundSchema = Placeholder$outboundSchema;
  /** @deprecated use `Placeholder$Outbound` instead. */
  export type Outbound = Placeholder$Outbound;
}

export function placeholderToJSON(placeholder: Placeholder): string {
  return JSON.stringify(Placeholder$outboundSchema.parse(placeholder));
}

export function placeholderFromJSON(
  jsonString: string,
): SafeParseResult<Placeholder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Placeholder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Placeholder' from JSON`,
  );
}

/** @internal */
export const UiSchemaProperty$inboundSchema: z.ZodType<
  UiSchemaProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  placeholder: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.any()),
      z.array(
        z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
      ),
    ]),
  ).optional(),
  component: UiComponentEnum$inboundSchema,
  properties: z.record(z.lazy(() => UiSchemaProperty$inboundSchema)).optional(),
});

/** @internal */
export type UiSchemaProperty$Outbound = {
  placeholder?:
    | string
    | number
    | boolean
    | { [k: string]: any }
    | Array<string | number | boolean | { [k: string]: any }>
    | null
    | undefined;
  component: string;
  properties?: { [k: string]: UiSchemaProperty$Outbound } | undefined;
};

/** @internal */
export const UiSchemaProperty$outboundSchema: z.ZodType<
  UiSchemaProperty$Outbound,
  z.ZodTypeDef,
  UiSchemaProperty
> = z.object({
  placeholder: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.any()),
      z.array(
        z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
      ),
    ]),
  ).optional(),
  component: UiComponentEnum$outboundSchema,
  properties: z.record(z.lazy(() => UiSchemaProperty$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UiSchemaProperty$ {
  /** @deprecated use `UiSchemaProperty$inboundSchema` instead. */
  export const inboundSchema = UiSchemaProperty$inboundSchema;
  /** @deprecated use `UiSchemaProperty$outboundSchema` instead. */
  export const outboundSchema = UiSchemaProperty$outboundSchema;
  /** @deprecated use `UiSchemaProperty$Outbound` instead. */
  export type Outbound = UiSchemaProperty$Outbound;
}

export function uiSchemaPropertyToJSON(
  uiSchemaProperty: UiSchemaProperty,
): string {
  return JSON.stringify(
    UiSchemaProperty$outboundSchema.parse(uiSchemaProperty),
  );
}

export function uiSchemaPropertyFromJSON(
  jsonString: string,
): SafeParseResult<UiSchemaProperty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UiSchemaProperty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UiSchemaProperty' from JSON`,
  );
}
