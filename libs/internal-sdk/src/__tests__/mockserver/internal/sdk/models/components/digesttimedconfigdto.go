// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type DigestTimedConfigDtoWeekDay string

const (
	DigestTimedConfigDtoWeekDayMonday    DigestTimedConfigDtoWeekDay = "monday"
	DigestTimedConfigDtoWeekDayTuesday   DigestTimedConfigDtoWeekDay = "tuesday"
	DigestTimedConfigDtoWeekDayWednesday DigestTimedConfigDtoWeekDay = "wednesday"
	DigestTimedConfigDtoWeekDayThursday  DigestTimedConfigDtoWeekDay = "thursday"
	DigestTimedConfigDtoWeekDayFriday    DigestTimedConfigDtoWeekDay = "friday"
	DigestTimedConfigDtoWeekDaySaturday  DigestTimedConfigDtoWeekDay = "saturday"
	DigestTimedConfigDtoWeekDaySunday    DigestTimedConfigDtoWeekDay = "sunday"
)

func (e DigestTimedConfigDtoWeekDay) ToPointer() *DigestTimedConfigDtoWeekDay {
	return &e
}
func (e *DigestTimedConfigDtoWeekDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = DigestTimedConfigDtoWeekDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DigestTimedConfigDtoWeekDay: %v", v)
	}
}

type DigestTimedConfigDto struct {
	// Time at which the digest is triggered
	AtTime *string `json:"atTime,omitempty"`
	// Days of the week for the digest
	WeekDays []DigestTimedConfigDtoWeekDay `json:"weekDays,omitempty"`
	// Specific days of the month for the digest
	MonthDays []float64 `json:"monthDays,omitempty"`
	// Ordinal position for the digest
	Ordinal *OrdinalEnum `json:"ordinal,omitempty"`
	// Value of the ordinal
	OrdinalValue *OrdinalValueEnum `json:"ordinalValue,omitempty"`
	// Type of monthly schedule
	MonthlyType *MonthlyTypeEnum `json:"monthlyType,omitempty"`
	// Cron expression for scheduling
	CronExpression *string `json:"cronExpression,omitempty"`
}

func (o *DigestTimedConfigDto) GetAtTime() *string {
	if o == nil {
		return nil
	}
	return o.AtTime
}

func (o *DigestTimedConfigDto) GetWeekDays() []DigestTimedConfigDtoWeekDay {
	if o == nil {
		return nil
	}
	return o.WeekDays
}

func (o *DigestTimedConfigDto) GetMonthDays() []float64 {
	if o == nil {
		return nil
	}
	return o.MonthDays
}

func (o *DigestTimedConfigDto) GetOrdinal() *OrdinalEnum {
	if o == nil {
		return nil
	}
	return o.Ordinal
}

func (o *DigestTimedConfigDto) GetOrdinalValue() *OrdinalValueEnum {
	if o == nil {
		return nil
	}
	return o.OrdinalValue
}

func (o *DigestTimedConfigDto) GetMonthlyType() *MonthlyTypeEnum {
	if o == nil {
		return nil
	}
	return o.MonthlyType
}

func (o *DigestTimedConfigDto) GetCronExpression() *string {
	if o == nil {
		return nil
	}
	return o.CronExpression
}
