// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type TimedConfigWeekDay string

const (
	TimedConfigWeekDayMonday    TimedConfigWeekDay = "monday"
	TimedConfigWeekDayTuesday   TimedConfigWeekDay = "tuesday"
	TimedConfigWeekDayWednesday TimedConfigWeekDay = "wednesday"
	TimedConfigWeekDayThursday  TimedConfigWeekDay = "thursday"
	TimedConfigWeekDayFriday    TimedConfigWeekDay = "friday"
	TimedConfigWeekDaySaturday  TimedConfigWeekDay = "saturday"
	TimedConfigWeekDaySunday    TimedConfigWeekDay = "sunday"
)

func (e TimedConfigWeekDay) ToPointer() *TimedConfigWeekDay {
	return &e
}
func (e *TimedConfigWeekDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = TimedConfigWeekDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TimedConfigWeekDay: %v", v)
	}
}

type Ordinal string

const (
	OrdinalOne   Ordinal = "1"
	OrdinalTwo   Ordinal = "2"
	OrdinalThree Ordinal = "3"
	OrdinalFour  Ordinal = "4"
	OrdinalFive  Ordinal = "5"
	OrdinalLast  Ordinal = "last"
)

func (e Ordinal) ToPointer() *Ordinal {
	return &e
}
func (e *Ordinal) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "last":
		*e = Ordinal(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ordinal: %v", v)
	}
}

type OrdinalValue string

const (
	OrdinalValueDay       OrdinalValue = "day"
	OrdinalValueWeekday   OrdinalValue = "weekday"
	OrdinalValueWeekend   OrdinalValue = "weekend"
	OrdinalValueSunday    OrdinalValue = "sunday"
	OrdinalValueMonday    OrdinalValue = "monday"
	OrdinalValueTuesday   OrdinalValue = "tuesday"
	OrdinalValueWednesday OrdinalValue = "wednesday"
	OrdinalValueThursday  OrdinalValue = "thursday"
	OrdinalValueFriday    OrdinalValue = "friday"
	OrdinalValueSaturday  OrdinalValue = "saturday"
)

func (e OrdinalValue) ToPointer() *OrdinalValue {
	return &e
}
func (e *OrdinalValue) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "day":
		fallthrough
	case "weekday":
		fallthrough
	case "weekend":
		fallthrough
	case "sunday":
		fallthrough
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		*e = OrdinalValue(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrdinalValue: %v", v)
	}
}

type MonthlyType string

const (
	MonthlyTypeEach MonthlyType = "each"
	MonthlyTypeOn   MonthlyType = "on"
)

func (e MonthlyType) ToPointer() *MonthlyType {
	return &e
}
func (e *MonthlyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "each":
		fallthrough
	case "on":
		*e = MonthlyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MonthlyType: %v", v)
	}
}

type TimedConfig struct {
	AtTime       *string              `json:"atTime,omitempty"`
	WeekDays     []TimedConfigWeekDay `json:"weekDays,omitempty"`
	MonthDays    []string             `json:"monthDays,omitempty"`
	Ordinal      *Ordinal             `json:"ordinal,omitempty"`
	OrdinalValue *OrdinalValue        `json:"ordinalValue,omitempty"`
	MonthlyType  *MonthlyType         `json:"monthlyType,omitempty"`
}

func (o *TimedConfig) GetAtTime() *string {
	if o == nil {
		return nil
	}
	return o.AtTime
}

func (o *TimedConfig) GetWeekDays() []TimedConfigWeekDay {
	if o == nil {
		return nil
	}
	return o.WeekDays
}

func (o *TimedConfig) GetMonthDays() []string {
	if o == nil {
		return nil
	}
	return o.MonthDays
}

func (o *TimedConfig) GetOrdinal() *Ordinal {
	if o == nil {
		return nil
	}
	return o.Ordinal
}

func (o *TimedConfig) GetOrdinalValue() *OrdinalValue {
	if o == nil {
		return nil
	}
	return o.OrdinalValue
}

func (o *TimedConfig) GetMonthlyType() *MonthlyType {
	if o == nil {
		return nil
	}
	return o.MonthlyType
}
