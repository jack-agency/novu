// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type WorkflowPreferencesDtoAllType string

const (
	WorkflowPreferencesDtoAllTypeWorkflowPreferenceDto WorkflowPreferencesDtoAllType = "WorkflowPreferenceDto"
)

// WorkflowPreferencesDtoAll - A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
type WorkflowPreferencesDtoAll struct {
	WorkflowPreferenceDto *WorkflowPreferenceDto `queryParam:"inline"`

	Type WorkflowPreferencesDtoAllType
}

func CreateWorkflowPreferencesDtoAllWorkflowPreferenceDto(workflowPreferenceDto WorkflowPreferenceDto) WorkflowPreferencesDtoAll {
	typ := WorkflowPreferencesDtoAllTypeWorkflowPreferenceDto

	return WorkflowPreferencesDtoAll{
		WorkflowPreferenceDto: &workflowPreferenceDto,
		Type:                  typ,
	}
}

func (u *WorkflowPreferencesDtoAll) UnmarshalJSON(data []byte) error {

	var workflowPreferenceDto WorkflowPreferenceDto = WorkflowPreferenceDto{}
	if err := utils.UnmarshalJSON(data, &workflowPreferenceDto, "", true, true); err == nil {
		u.WorkflowPreferenceDto = &workflowPreferenceDto
		u.Type = WorkflowPreferencesDtoAllTypeWorkflowPreferenceDto
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for WorkflowPreferencesDtoAll", string(data))
}

func (u WorkflowPreferencesDtoAll) MarshalJSON() ([]byte, error) {
	if u.WorkflowPreferenceDto != nil {
		return utils.MarshalJSON(u.WorkflowPreferenceDto, "", true)
	}

	return nil, errors.New("could not marshal union type WorkflowPreferencesDtoAll: all fields are null")
}

type WorkflowPreferencesDto struct {
	// A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
	All WorkflowPreferencesDtoAll `json:"all"`
	// Preferences for different communication channels
	Channels map[string]ChannelPreferenceDto `json:"channels"`
}

func (o *WorkflowPreferencesDto) GetAll() WorkflowPreferencesDtoAll {
	if o == nil {
		return WorkflowPreferencesDtoAll{}
	}
	return o.All
}

func (o *WorkflowPreferencesDto) GetChannels() map[string]ChannelPreferenceDto {
	if o == nil {
		return map[string]ChannelPreferenceDto{}
	}
	return o.Channels
}
