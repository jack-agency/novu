// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ValueEnum string

const (
	ValueEnumAnd ValueEnum = "AND"
	ValueEnumOr  ValueEnum = "OR"
)

func (e ValueEnum) ToPointer() *ValueEnum {
	return &e
}
func (e *ValueEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AND":
		fallthrough
	case "OR":
		*e = ValueEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValueEnum: %v", v)
	}
}

type StepFilterDto struct {
	IsNegated bool                 `json:"isNegated"`
	Type      BuilderFieldTypeEnum `json:"type"`
	Value     ValueEnum            `json:"value"`
	Children  []FieldFilterPartDto `json:"children"`
}

func (o *StepFilterDto) GetIsNegated() bool {
	if o == nil {
		return false
	}
	return o.IsNegated
}

func (o *StepFilterDto) GetType() BuilderFieldTypeEnum {
	if o == nil {
		return BuilderFieldTypeEnum("")
	}
	return o.Type
}

func (o *StepFilterDto) GetValue() ValueEnum {
	if o == nil {
		return ValueEnum("")
	}
	return o.Value
}

func (o *StepFilterDto) GetChildren() []FieldFilterPartDto {
	if o == nil {
		return []FieldFilterPartDto{}
	}
	return o.Children
}
