// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// TriggerEventResponseDtoStatus - Status of the trigger
type TriggerEventResponseDtoStatus string

const (
	TriggerEventResponseDtoStatusError                        TriggerEventResponseDtoStatus = "error"
	TriggerEventResponseDtoStatusTriggerNotActive             TriggerEventResponseDtoStatus = "trigger_not_active"
	TriggerEventResponseDtoStatusNoWorkflowActiveStepsDefined TriggerEventResponseDtoStatus = "no_workflow_active_steps_defined"
	TriggerEventResponseDtoStatusNoWorkflowStepsDefined       TriggerEventResponseDtoStatus = "no_workflow_steps_defined"
	TriggerEventResponseDtoStatusProcessed                    TriggerEventResponseDtoStatus = "processed"
	TriggerEventResponseDtoStatusNoTenantFound                TriggerEventResponseDtoStatus = "no_tenant_found"
	TriggerEventResponseDtoStatusInvalidRecipients            TriggerEventResponseDtoStatus = "invalid_recipients"
)

func (e TriggerEventResponseDtoStatus) ToPointer() *TriggerEventResponseDtoStatus {
	return &e
}
func (e *TriggerEventResponseDtoStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "trigger_not_active":
		fallthrough
	case "no_workflow_active_steps_defined":
		fallthrough
	case "no_workflow_steps_defined":
		fallthrough
	case "processed":
		fallthrough
	case "no_tenant_found":
		fallthrough
	case "invalid_recipients":
		*e = TriggerEventResponseDtoStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TriggerEventResponseDtoStatus: %v", v)
	}
}

type TriggerEventResponseDto struct {
	// Indicates whether the trigger was acknowledged or not
	Acknowledged bool `json:"acknowledged"`
	// Status of the trigger
	Status TriggerEventResponseDtoStatus `json:"status"`
	// In case of an error, this field will contain the error message(s)
	Error []string `json:"error,omitempty"`
	// The returned transaction ID of the trigger
	TransactionID *string `json:"transactionId,omitempty"`
}

func (o *TriggerEventResponseDto) GetAcknowledged() bool {
	if o == nil {
		return false
	}
	return o.Acknowledged
}

func (o *TriggerEventResponseDto) GetStatus() TriggerEventResponseDtoStatus {
	if o == nil {
		return TriggerEventResponseDtoStatus("")
	}
	return o.Status
}

func (o *TriggerEventResponseDto) GetError() []string {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *TriggerEventResponseDto) GetTransactionID() *string {
	if o == nil {
		return nil
	}
	return o.TransactionID
}
