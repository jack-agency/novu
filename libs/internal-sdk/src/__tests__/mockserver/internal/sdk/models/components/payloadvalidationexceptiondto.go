// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type PayloadValidationExceptionDtoMessageUnion1Type string

const (
	PayloadValidationExceptionDtoMessageUnion1TypeStr      PayloadValidationExceptionDtoMessageUnion1Type = "str"
	PayloadValidationExceptionDtoMessageUnion1TypeNumber   PayloadValidationExceptionDtoMessageUnion1Type = "number"
	PayloadValidationExceptionDtoMessageUnion1TypeBoolean  PayloadValidationExceptionDtoMessageUnion1Type = "boolean"
	PayloadValidationExceptionDtoMessageUnion1TypeMapOfAny PayloadValidationExceptionDtoMessageUnion1Type = "mapOfAny"
)

type PayloadValidationExceptionDtoMessageUnion1 struct {
	Str      *string        `queryParam:"inline"`
	Number   *float64       `queryParam:"inline"`
	Boolean  *bool          `queryParam:"inline"`
	MapOfAny map[string]any `queryParam:"inline"`

	Type PayloadValidationExceptionDtoMessageUnion1Type
}

func CreatePayloadValidationExceptionDtoMessageUnion1Str(str string) PayloadValidationExceptionDtoMessageUnion1 {
	typ := PayloadValidationExceptionDtoMessageUnion1TypeStr

	return PayloadValidationExceptionDtoMessageUnion1{
		Str:  &str,
		Type: typ,
	}
}

func CreatePayloadValidationExceptionDtoMessageUnion1Number(number float64) PayloadValidationExceptionDtoMessageUnion1 {
	typ := PayloadValidationExceptionDtoMessageUnion1TypeNumber

	return PayloadValidationExceptionDtoMessageUnion1{
		Number: &number,
		Type:   typ,
	}
}

func CreatePayloadValidationExceptionDtoMessageUnion1Boolean(boolean bool) PayloadValidationExceptionDtoMessageUnion1 {
	typ := PayloadValidationExceptionDtoMessageUnion1TypeBoolean

	return PayloadValidationExceptionDtoMessageUnion1{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreatePayloadValidationExceptionDtoMessageUnion1MapOfAny(mapOfAny map[string]any) PayloadValidationExceptionDtoMessageUnion1 {
	typ := PayloadValidationExceptionDtoMessageUnion1TypeMapOfAny

	return PayloadValidationExceptionDtoMessageUnion1{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *PayloadValidationExceptionDtoMessageUnion1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PayloadValidationExceptionDtoMessageUnion1TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = PayloadValidationExceptionDtoMessageUnion1TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = PayloadValidationExceptionDtoMessageUnion1TypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = PayloadValidationExceptionDtoMessageUnion1TypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PayloadValidationExceptionDtoMessageUnion1", string(data))
}

func (u PayloadValidationExceptionDtoMessageUnion1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type PayloadValidationExceptionDtoMessageUnion1: all fields are null")
}

type PayloadValidationExceptionDtoMessage struct {
}

type PayloadValidationExceptionDtoMessageUnion2Type string

const (
	PayloadValidationExceptionDtoMessageUnion2TypeStr                                               PayloadValidationExceptionDtoMessageUnion2Type = "str"
	PayloadValidationExceptionDtoMessageUnion2TypeNumber                                            PayloadValidationExceptionDtoMessageUnion2Type = "number"
	PayloadValidationExceptionDtoMessageUnion2TypeBoolean                                           PayloadValidationExceptionDtoMessageUnion2Type = "boolean"
	PayloadValidationExceptionDtoMessageUnion2TypePayloadValidationExceptionDtoMessage              PayloadValidationExceptionDtoMessageUnion2Type = "PayloadValidationExceptionDto_message"
	PayloadValidationExceptionDtoMessageUnion2TypeArrayOfPayloadValidationExceptionDtoMessageUnion1 PayloadValidationExceptionDtoMessageUnion2Type = "arrayOfPayloadValidationExceptionDtoMessageUnion1"
)

// PayloadValidationExceptionDtoMessageUnion2 - Value that failed validation
type PayloadValidationExceptionDtoMessageUnion2 struct {
	Str                                               *string                                       `queryParam:"inline"`
	Number                                            *float64                                      `queryParam:"inline"`
	Boolean                                           *bool                                         `queryParam:"inline"`
	PayloadValidationExceptionDtoMessage              *PayloadValidationExceptionDtoMessage         `queryParam:"inline"`
	ArrayOfPayloadValidationExceptionDtoMessageUnion1 []*PayloadValidationExceptionDtoMessageUnion1 `queryParam:"inline"`

	Type PayloadValidationExceptionDtoMessageUnion2Type
}

func CreatePayloadValidationExceptionDtoMessageUnion2Str(str string) PayloadValidationExceptionDtoMessageUnion2 {
	typ := PayloadValidationExceptionDtoMessageUnion2TypeStr

	return PayloadValidationExceptionDtoMessageUnion2{
		Str:  &str,
		Type: typ,
	}
}

func CreatePayloadValidationExceptionDtoMessageUnion2Number(number float64) PayloadValidationExceptionDtoMessageUnion2 {
	typ := PayloadValidationExceptionDtoMessageUnion2TypeNumber

	return PayloadValidationExceptionDtoMessageUnion2{
		Number: &number,
		Type:   typ,
	}
}

func CreatePayloadValidationExceptionDtoMessageUnion2Boolean(boolean bool) PayloadValidationExceptionDtoMessageUnion2 {
	typ := PayloadValidationExceptionDtoMessageUnion2TypeBoolean

	return PayloadValidationExceptionDtoMessageUnion2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreatePayloadValidationExceptionDtoMessageUnion2PayloadValidationExceptionDtoMessage(payloadValidationExceptionDtoMessage PayloadValidationExceptionDtoMessage) PayloadValidationExceptionDtoMessageUnion2 {
	typ := PayloadValidationExceptionDtoMessageUnion2TypePayloadValidationExceptionDtoMessage

	return PayloadValidationExceptionDtoMessageUnion2{
		PayloadValidationExceptionDtoMessage: &payloadValidationExceptionDtoMessage,
		Type:                                 typ,
	}
}

func CreatePayloadValidationExceptionDtoMessageUnion2ArrayOfPayloadValidationExceptionDtoMessageUnion1(arrayOfPayloadValidationExceptionDtoMessageUnion1 []*PayloadValidationExceptionDtoMessageUnion1) PayloadValidationExceptionDtoMessageUnion2 {
	typ := PayloadValidationExceptionDtoMessageUnion2TypeArrayOfPayloadValidationExceptionDtoMessageUnion1

	return PayloadValidationExceptionDtoMessageUnion2{
		ArrayOfPayloadValidationExceptionDtoMessageUnion1: arrayOfPayloadValidationExceptionDtoMessageUnion1,
		Type: typ,
	}
}

func (u *PayloadValidationExceptionDtoMessageUnion2) UnmarshalJSON(data []byte) error {

	var payloadValidationExceptionDtoMessage PayloadValidationExceptionDtoMessage = PayloadValidationExceptionDtoMessage{}
	if err := utils.UnmarshalJSON(data, &payloadValidationExceptionDtoMessage, "", true, true); err == nil {
		u.PayloadValidationExceptionDtoMessage = &payloadValidationExceptionDtoMessage
		u.Type = PayloadValidationExceptionDtoMessageUnion2TypePayloadValidationExceptionDtoMessage
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PayloadValidationExceptionDtoMessageUnion2TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = PayloadValidationExceptionDtoMessageUnion2TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = PayloadValidationExceptionDtoMessageUnion2TypeBoolean
		return nil
	}

	var arrayOfPayloadValidationExceptionDtoMessageUnion1 []*PayloadValidationExceptionDtoMessageUnion1 = []*PayloadValidationExceptionDtoMessageUnion1{}
	if err := utils.UnmarshalJSON(data, &arrayOfPayloadValidationExceptionDtoMessageUnion1, "", true, true); err == nil {
		u.ArrayOfPayloadValidationExceptionDtoMessageUnion1 = arrayOfPayloadValidationExceptionDtoMessageUnion1
		u.Type = PayloadValidationExceptionDtoMessageUnion2TypeArrayOfPayloadValidationExceptionDtoMessageUnion1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PayloadValidationExceptionDtoMessageUnion2", string(data))
}

func (u PayloadValidationExceptionDtoMessageUnion2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.PayloadValidationExceptionDtoMessage != nil {
		return utils.MarshalJSON(u.PayloadValidationExceptionDtoMessage, "", true)
	}

	if u.ArrayOfPayloadValidationExceptionDtoMessageUnion1 != nil {
		return utils.MarshalJSON(u.ArrayOfPayloadValidationExceptionDtoMessageUnion1, "", true)
	}

	return nil, errors.New("could not marshal union type PayloadValidationExceptionDtoMessageUnion2: all fields are null")
}

// Schema - The JSON schema that was used for validation
type Schema struct {
}
