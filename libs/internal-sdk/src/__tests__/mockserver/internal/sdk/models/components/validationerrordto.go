// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type ValidationErrorDtoMessageUnion1Type string

const (
	ValidationErrorDtoMessageUnion1TypeStr      ValidationErrorDtoMessageUnion1Type = "str"
	ValidationErrorDtoMessageUnion1TypeNumber   ValidationErrorDtoMessageUnion1Type = "number"
	ValidationErrorDtoMessageUnion1TypeBoolean  ValidationErrorDtoMessageUnion1Type = "boolean"
	ValidationErrorDtoMessageUnion1TypeMapOfAny ValidationErrorDtoMessageUnion1Type = "mapOfAny"
)

type ValidationErrorDtoMessageUnion1 struct {
	Str      *string        `queryParam:"inline"`
	Number   *float64       `queryParam:"inline"`
	Boolean  *bool          `queryParam:"inline"`
	MapOfAny map[string]any `queryParam:"inline"`

	Type ValidationErrorDtoMessageUnion1Type
}

func CreateValidationErrorDtoMessageUnion1Str(str string) ValidationErrorDtoMessageUnion1 {
	typ := ValidationErrorDtoMessageUnion1TypeStr

	return ValidationErrorDtoMessageUnion1{
		Str:  &str,
		Type: typ,
	}
}

func CreateValidationErrorDtoMessageUnion1Number(number float64) ValidationErrorDtoMessageUnion1 {
	typ := ValidationErrorDtoMessageUnion1TypeNumber

	return ValidationErrorDtoMessageUnion1{
		Number: &number,
		Type:   typ,
	}
}

func CreateValidationErrorDtoMessageUnion1Boolean(boolean bool) ValidationErrorDtoMessageUnion1 {
	typ := ValidationErrorDtoMessageUnion1TypeBoolean

	return ValidationErrorDtoMessageUnion1{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateValidationErrorDtoMessageUnion1MapOfAny(mapOfAny map[string]any) ValidationErrorDtoMessageUnion1 {
	typ := ValidationErrorDtoMessageUnion1TypeMapOfAny

	return ValidationErrorDtoMessageUnion1{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *ValidationErrorDtoMessageUnion1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ValidationErrorDtoMessageUnion1TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ValidationErrorDtoMessageUnion1TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ValidationErrorDtoMessageUnion1TypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ValidationErrorDtoMessageUnion1TypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ValidationErrorDtoMessageUnion1", string(data))
}

func (u ValidationErrorDtoMessageUnion1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type ValidationErrorDtoMessageUnion1: all fields are null")
}

type ValidationErrorDtoMessage struct {
}

type ValidationErrorDtoMessageUnion2Type string

const (
	ValidationErrorDtoMessageUnion2TypeStr                                    ValidationErrorDtoMessageUnion2Type = "str"
	ValidationErrorDtoMessageUnion2TypeNumber                                 ValidationErrorDtoMessageUnion2Type = "number"
	ValidationErrorDtoMessageUnion2TypeBoolean                                ValidationErrorDtoMessageUnion2Type = "boolean"
	ValidationErrorDtoMessageUnion2TypeValidationErrorDtoMessage              ValidationErrorDtoMessageUnion2Type = "ValidationErrorDto_message"
	ValidationErrorDtoMessageUnion2TypeArrayOfValidationErrorDtoMessageUnion1 ValidationErrorDtoMessageUnion2Type = "arrayOfValidationErrorDtoMessageUnion1"
)

// ValidationErrorDtoMessageUnion2 - Value that failed validation
type ValidationErrorDtoMessageUnion2 struct {
	Str                                    *string                            `queryParam:"inline"`
	Number                                 *float64                           `queryParam:"inline"`
	Boolean                                *bool                              `queryParam:"inline"`
	ValidationErrorDtoMessage              *ValidationErrorDtoMessage         `queryParam:"inline"`
	ArrayOfValidationErrorDtoMessageUnion1 []*ValidationErrorDtoMessageUnion1 `queryParam:"inline"`

	Type ValidationErrorDtoMessageUnion2Type
}

func CreateValidationErrorDtoMessageUnion2Str(str string) ValidationErrorDtoMessageUnion2 {
	typ := ValidationErrorDtoMessageUnion2TypeStr

	return ValidationErrorDtoMessageUnion2{
		Str:  &str,
		Type: typ,
	}
}

func CreateValidationErrorDtoMessageUnion2Number(number float64) ValidationErrorDtoMessageUnion2 {
	typ := ValidationErrorDtoMessageUnion2TypeNumber

	return ValidationErrorDtoMessageUnion2{
		Number: &number,
		Type:   typ,
	}
}

func CreateValidationErrorDtoMessageUnion2Boolean(boolean bool) ValidationErrorDtoMessageUnion2 {
	typ := ValidationErrorDtoMessageUnion2TypeBoolean

	return ValidationErrorDtoMessageUnion2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateValidationErrorDtoMessageUnion2ValidationErrorDtoMessage(validationErrorDtoMessage ValidationErrorDtoMessage) ValidationErrorDtoMessageUnion2 {
	typ := ValidationErrorDtoMessageUnion2TypeValidationErrorDtoMessage

	return ValidationErrorDtoMessageUnion2{
		ValidationErrorDtoMessage: &validationErrorDtoMessage,
		Type:                      typ,
	}
}

func CreateValidationErrorDtoMessageUnion2ArrayOfValidationErrorDtoMessageUnion1(arrayOfValidationErrorDtoMessageUnion1 []*ValidationErrorDtoMessageUnion1) ValidationErrorDtoMessageUnion2 {
	typ := ValidationErrorDtoMessageUnion2TypeArrayOfValidationErrorDtoMessageUnion1

	return ValidationErrorDtoMessageUnion2{
		ArrayOfValidationErrorDtoMessageUnion1: arrayOfValidationErrorDtoMessageUnion1,
		Type:                                   typ,
	}
}

func (u *ValidationErrorDtoMessageUnion2) UnmarshalJSON(data []byte) error {

	var validationErrorDtoMessage ValidationErrorDtoMessage = ValidationErrorDtoMessage{}
	if err := utils.UnmarshalJSON(data, &validationErrorDtoMessage, "", true, true); err == nil {
		u.ValidationErrorDtoMessage = &validationErrorDtoMessage
		u.Type = ValidationErrorDtoMessageUnion2TypeValidationErrorDtoMessage
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ValidationErrorDtoMessageUnion2TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ValidationErrorDtoMessageUnion2TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ValidationErrorDtoMessageUnion2TypeBoolean
		return nil
	}

	var arrayOfValidationErrorDtoMessageUnion1 []*ValidationErrorDtoMessageUnion1 = []*ValidationErrorDtoMessageUnion1{}
	if err := utils.UnmarshalJSON(data, &arrayOfValidationErrorDtoMessageUnion1, "", true, true); err == nil {
		u.ArrayOfValidationErrorDtoMessageUnion1 = arrayOfValidationErrorDtoMessageUnion1
		u.Type = ValidationErrorDtoMessageUnion2TypeArrayOfValidationErrorDtoMessageUnion1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ValidationErrorDtoMessageUnion2", string(data))
}

func (u ValidationErrorDtoMessageUnion2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ValidationErrorDtoMessage != nil {
		return utils.MarshalJSON(u.ValidationErrorDtoMessage, "", true)
	}

	if u.ArrayOfValidationErrorDtoMessageUnion1 != nil {
		return utils.MarshalJSON(u.ArrayOfValidationErrorDtoMessageUnion1, "", true)
	}

	return nil, errors.New("could not marshal union type ValidationErrorDtoMessageUnion2: all fields are null")
}
