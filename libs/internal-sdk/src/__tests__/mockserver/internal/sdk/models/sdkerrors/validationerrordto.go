// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"mockserver/internal/sdk/models/components"
)

type ValidationErrorDto struct {
	// HTTP status code of the error response.
	StatusCode float64 `json:"statusCode"`
	// Timestamp of when the error occurred.
	Timestamp string `json:"timestamp"`
	// The path where the error occurred.
	Path string `json:"path"`
	// Value that failed validation
	Message *components.ValidationErrorDtoMessageUnion2 `json:"message,omitempty"`
	// Optional context object for additional error details.
	Ctx map[string]any `json:"ctx,omitempty"`
	// Optional unique identifier for the error, useful for tracking using Sentry and
	//       New Relic, only available for 500.
	ErrorID *string `json:"errorId,omitempty"`
	// A record of validation errors keyed by field name
	Errors   map[string]components.ConstraintValidation `json:"errors"`
	HTTPMeta components.HTTPMetadata                    `json:"-"`
}

var _ error = &ValidationErrorDto{}

func (e *ValidationErrorDto) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
