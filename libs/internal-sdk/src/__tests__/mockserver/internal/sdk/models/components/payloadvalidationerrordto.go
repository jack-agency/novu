// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type PayloadValidationErrorDtoValueUnion1Type string

const (
	PayloadValidationErrorDtoValueUnion1TypeStr      PayloadValidationErrorDtoValueUnion1Type = "str"
	PayloadValidationErrorDtoValueUnion1TypeNumber   PayloadValidationErrorDtoValueUnion1Type = "number"
	PayloadValidationErrorDtoValueUnion1TypeBoolean  PayloadValidationErrorDtoValueUnion1Type = "boolean"
	PayloadValidationErrorDtoValueUnion1TypeMapOfAny PayloadValidationErrorDtoValueUnion1Type = "mapOfAny"
)

type PayloadValidationErrorDtoValueUnion1 struct {
	Str      *string        `queryParam:"inline"`
	Number   *float64       `queryParam:"inline"`
	Boolean  *bool          `queryParam:"inline"`
	MapOfAny map[string]any `queryParam:"inline"`

	Type PayloadValidationErrorDtoValueUnion1Type
}

func CreatePayloadValidationErrorDtoValueUnion1Str(str string) PayloadValidationErrorDtoValueUnion1 {
	typ := PayloadValidationErrorDtoValueUnion1TypeStr

	return PayloadValidationErrorDtoValueUnion1{
		Str:  &str,
		Type: typ,
	}
}

func CreatePayloadValidationErrorDtoValueUnion1Number(number float64) PayloadValidationErrorDtoValueUnion1 {
	typ := PayloadValidationErrorDtoValueUnion1TypeNumber

	return PayloadValidationErrorDtoValueUnion1{
		Number: &number,
		Type:   typ,
	}
}

func CreatePayloadValidationErrorDtoValueUnion1Boolean(boolean bool) PayloadValidationErrorDtoValueUnion1 {
	typ := PayloadValidationErrorDtoValueUnion1TypeBoolean

	return PayloadValidationErrorDtoValueUnion1{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreatePayloadValidationErrorDtoValueUnion1MapOfAny(mapOfAny map[string]any) PayloadValidationErrorDtoValueUnion1 {
	typ := PayloadValidationErrorDtoValueUnion1TypeMapOfAny

	return PayloadValidationErrorDtoValueUnion1{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *PayloadValidationErrorDtoValueUnion1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PayloadValidationErrorDtoValueUnion1TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = PayloadValidationErrorDtoValueUnion1TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = PayloadValidationErrorDtoValueUnion1TypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = PayloadValidationErrorDtoValueUnion1TypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PayloadValidationErrorDtoValueUnion1", string(data))
}

func (u PayloadValidationErrorDtoValueUnion1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type PayloadValidationErrorDtoValueUnion1: all fields are null")
}

type PayloadValidationErrorDtoValue struct {
}

type PayloadValidationErrorDtoValueUnion2Type string

const (
	PayloadValidationErrorDtoValueUnion2TypeStr                                         PayloadValidationErrorDtoValueUnion2Type = "str"
	PayloadValidationErrorDtoValueUnion2TypeNumber                                      PayloadValidationErrorDtoValueUnion2Type = "number"
	PayloadValidationErrorDtoValueUnion2TypeBoolean                                     PayloadValidationErrorDtoValueUnion2Type = "boolean"
	PayloadValidationErrorDtoValueUnion2TypePayloadValidationErrorDtoValue              PayloadValidationErrorDtoValueUnion2Type = "PayloadValidationErrorDto_value"
	PayloadValidationErrorDtoValueUnion2TypeArrayOfPayloadValidationErrorDtoValueUnion1 PayloadValidationErrorDtoValueUnion2Type = "arrayOfPayloadValidationErrorDtoValueUnion1"
)

// PayloadValidationErrorDtoValueUnion2 - The actual value that failed validation
type PayloadValidationErrorDtoValueUnion2 struct {
	Str                                         *string                                 `queryParam:"inline"`
	Number                                      *float64                                `queryParam:"inline"`
	Boolean                                     *bool                                   `queryParam:"inline"`
	PayloadValidationErrorDtoValue              *PayloadValidationErrorDtoValue         `queryParam:"inline"`
	ArrayOfPayloadValidationErrorDtoValueUnion1 []*PayloadValidationErrorDtoValueUnion1 `queryParam:"inline"`

	Type PayloadValidationErrorDtoValueUnion2Type
}

func CreatePayloadValidationErrorDtoValueUnion2Str(str string) PayloadValidationErrorDtoValueUnion2 {
	typ := PayloadValidationErrorDtoValueUnion2TypeStr

	return PayloadValidationErrorDtoValueUnion2{
		Str:  &str,
		Type: typ,
	}
}

func CreatePayloadValidationErrorDtoValueUnion2Number(number float64) PayloadValidationErrorDtoValueUnion2 {
	typ := PayloadValidationErrorDtoValueUnion2TypeNumber

	return PayloadValidationErrorDtoValueUnion2{
		Number: &number,
		Type:   typ,
	}
}

func CreatePayloadValidationErrorDtoValueUnion2Boolean(boolean bool) PayloadValidationErrorDtoValueUnion2 {
	typ := PayloadValidationErrorDtoValueUnion2TypeBoolean

	return PayloadValidationErrorDtoValueUnion2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreatePayloadValidationErrorDtoValueUnion2PayloadValidationErrorDtoValue(payloadValidationErrorDtoValue PayloadValidationErrorDtoValue) PayloadValidationErrorDtoValueUnion2 {
	typ := PayloadValidationErrorDtoValueUnion2TypePayloadValidationErrorDtoValue

	return PayloadValidationErrorDtoValueUnion2{
		PayloadValidationErrorDtoValue: &payloadValidationErrorDtoValue,
		Type:                           typ,
	}
}

func CreatePayloadValidationErrorDtoValueUnion2ArrayOfPayloadValidationErrorDtoValueUnion1(arrayOfPayloadValidationErrorDtoValueUnion1 []*PayloadValidationErrorDtoValueUnion1) PayloadValidationErrorDtoValueUnion2 {
	typ := PayloadValidationErrorDtoValueUnion2TypeArrayOfPayloadValidationErrorDtoValueUnion1

	return PayloadValidationErrorDtoValueUnion2{
		ArrayOfPayloadValidationErrorDtoValueUnion1: arrayOfPayloadValidationErrorDtoValueUnion1,
		Type: typ,
	}
}

func (u *PayloadValidationErrorDtoValueUnion2) UnmarshalJSON(data []byte) error {

	var payloadValidationErrorDtoValue PayloadValidationErrorDtoValue = PayloadValidationErrorDtoValue{}
	if err := utils.UnmarshalJSON(data, &payloadValidationErrorDtoValue, "", true, true); err == nil {
		u.PayloadValidationErrorDtoValue = &payloadValidationErrorDtoValue
		u.Type = PayloadValidationErrorDtoValueUnion2TypePayloadValidationErrorDtoValue
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PayloadValidationErrorDtoValueUnion2TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = PayloadValidationErrorDtoValueUnion2TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = PayloadValidationErrorDtoValueUnion2TypeBoolean
		return nil
	}

	var arrayOfPayloadValidationErrorDtoValueUnion1 []*PayloadValidationErrorDtoValueUnion1 = []*PayloadValidationErrorDtoValueUnion1{}
	if err := utils.UnmarshalJSON(data, &arrayOfPayloadValidationErrorDtoValueUnion1, "", true, true); err == nil {
		u.ArrayOfPayloadValidationErrorDtoValueUnion1 = arrayOfPayloadValidationErrorDtoValueUnion1
		u.Type = PayloadValidationErrorDtoValueUnion2TypeArrayOfPayloadValidationErrorDtoValueUnion1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PayloadValidationErrorDtoValueUnion2", string(data))
}

func (u PayloadValidationErrorDtoValueUnion2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.PayloadValidationErrorDtoValue != nil {
		return utils.MarshalJSON(u.PayloadValidationErrorDtoValue, "", true)
	}

	if u.ArrayOfPayloadValidationErrorDtoValueUnion1 != nil {
		return utils.MarshalJSON(u.ArrayOfPayloadValidationErrorDtoValueUnion1, "", true)
	}

	return nil, errors.New("could not marshal union type PayloadValidationErrorDtoValueUnion2: all fields are null")
}

type PayloadValidationErrorDto struct {
	// Field path that failed validation
	Field string `json:"field"`
	// Validation error message
	Message string `json:"message"`
	// The actual value that failed validation
	Value *PayloadValidationErrorDtoValueUnion2 `json:"value,omitempty"`
	// JSON Schema path where the validation failed
	SchemaPath *string `json:"schemaPath,omitempty"`
}

func (o *PayloadValidationErrorDto) GetField() string {
	if o == nil {
		return ""
	}
	return o.Field
}

func (o *PayloadValidationErrorDto) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *PayloadValidationErrorDto) GetValue() *PayloadValidationErrorDtoValueUnion2 {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *PayloadValidationErrorDto) GetSchemaPath() *string {
	if o == nil {
		return nil
	}
	return o.SchemaPath
}
