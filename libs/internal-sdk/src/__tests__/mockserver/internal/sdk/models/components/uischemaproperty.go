// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type Placeholder1Type string

const (
	Placeholder1TypeStr      Placeholder1Type = "str"
	Placeholder1TypeNumber   Placeholder1Type = "number"
	Placeholder1TypeBoolean  Placeholder1Type = "boolean"
	Placeholder1TypeMapOfAny Placeholder1Type = "mapOfAny"
)

type Placeholder1 struct {
	Str      *string        `queryParam:"inline"`
	Number   *float64       `queryParam:"inline"`
	Boolean  *bool          `queryParam:"inline"`
	MapOfAny map[string]any `queryParam:"inline"`

	Type Placeholder1Type
}

func CreatePlaceholder1Str(str string) Placeholder1 {
	typ := Placeholder1TypeStr

	return Placeholder1{
		Str:  &str,
		Type: typ,
	}
}

func CreatePlaceholder1Number(number float64) Placeholder1 {
	typ := Placeholder1TypeNumber

	return Placeholder1{
		Number: &number,
		Type:   typ,
	}
}

func CreatePlaceholder1Boolean(boolean bool) Placeholder1 {
	typ := Placeholder1TypeBoolean

	return Placeholder1{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreatePlaceholder1MapOfAny(mapOfAny map[string]any) Placeholder1 {
	typ := Placeholder1TypeMapOfAny

	return Placeholder1{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *Placeholder1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = Placeholder1TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = Placeholder1TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = Placeholder1TypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = Placeholder1TypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Placeholder1", string(data))
}

func (u Placeholder1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type Placeholder1: all fields are null")
}

type Placeholder2Type string

const (
	Placeholder2TypeStr                 Placeholder2Type = "str"
	Placeholder2TypeNumber              Placeholder2Type = "number"
	Placeholder2TypeBoolean             Placeholder2Type = "boolean"
	Placeholder2TypeMapOfAny            Placeholder2Type = "mapOfAny"
	Placeholder2TypeArrayOfPlaceholder1 Placeholder2Type = "arrayOfPlaceholder1"
)

// Placeholder2 - Placeholder for the UI Schema Property
type Placeholder2 struct {
	Str                 *string        `queryParam:"inline"`
	Number              *float64       `queryParam:"inline"`
	Boolean             *bool          `queryParam:"inline"`
	MapOfAny            map[string]any `queryParam:"inline"`
	ArrayOfPlaceholder1 []Placeholder1 `queryParam:"inline"`

	Type Placeholder2Type
}

func CreatePlaceholder2Str(str string) Placeholder2 {
	typ := Placeholder2TypeStr

	return Placeholder2{
		Str:  &str,
		Type: typ,
	}
}

func CreatePlaceholder2Number(number float64) Placeholder2 {
	typ := Placeholder2TypeNumber

	return Placeholder2{
		Number: &number,
		Type:   typ,
	}
}

func CreatePlaceholder2Boolean(boolean bool) Placeholder2 {
	typ := Placeholder2TypeBoolean

	return Placeholder2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreatePlaceholder2MapOfAny(mapOfAny map[string]any) Placeholder2 {
	typ := Placeholder2TypeMapOfAny

	return Placeholder2{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreatePlaceholder2ArrayOfPlaceholder1(arrayOfPlaceholder1 []Placeholder1) Placeholder2 {
	typ := Placeholder2TypeArrayOfPlaceholder1

	return Placeholder2{
		ArrayOfPlaceholder1: arrayOfPlaceholder1,
		Type:                typ,
	}
}

func (u *Placeholder2) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = Placeholder2TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = Placeholder2TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = Placeholder2TypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = Placeholder2TypeMapOfAny
		return nil
	}

	var arrayOfPlaceholder1 []Placeholder1 = []Placeholder1{}
	if err := utils.UnmarshalJSON(data, &arrayOfPlaceholder1, "", true, true); err == nil {
		u.ArrayOfPlaceholder1 = arrayOfPlaceholder1
		u.Type = Placeholder2TypeArrayOfPlaceholder1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Placeholder2", string(data))
}

func (u Placeholder2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfPlaceholder1 != nil {
		return utils.MarshalJSON(u.ArrayOfPlaceholder1, "", true)
	}

	return nil, errors.New("could not marshal union type Placeholder2: all fields are null")
}

type UISchemaProperty struct {
	// Placeholder for the UI Schema Property
	Placeholder *Placeholder2 `json:"placeholder,omitempty"`
	// Component type for the UI Schema Property
	Component UIComponentEnum `json:"component"`
	// Properties of the UI Schema
	Properties map[string]UISchemaProperty `json:"properties,omitempty"`
}

func (o *UISchemaProperty) GetPlaceholder() *Placeholder2 {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *UISchemaProperty) GetComponent() UIComponentEnum {
	if o == nil {
		return UIComponentEnum("")
	}
	return o.Component
}

func (o *UISchemaProperty) GetProperties() map[string]UISchemaProperty {
	if o == nil {
		return nil
	}
	return o.Properties
}
