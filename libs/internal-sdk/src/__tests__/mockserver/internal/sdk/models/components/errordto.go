// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type ErrorDtoMessageUnion1Type string

const (
	ErrorDtoMessageUnion1TypeStr      ErrorDtoMessageUnion1Type = "str"
	ErrorDtoMessageUnion1TypeNumber   ErrorDtoMessageUnion1Type = "number"
	ErrorDtoMessageUnion1TypeBoolean  ErrorDtoMessageUnion1Type = "boolean"
	ErrorDtoMessageUnion1TypeMapOfAny ErrorDtoMessageUnion1Type = "mapOfAny"
)

type ErrorDtoMessageUnion1 struct {
	Str      *string        `queryParam:"inline"`
	Number   *float64       `queryParam:"inline"`
	Boolean  *bool          `queryParam:"inline"`
	MapOfAny map[string]any `queryParam:"inline"`

	Type ErrorDtoMessageUnion1Type
}

func CreateErrorDtoMessageUnion1Str(str string) ErrorDtoMessageUnion1 {
	typ := ErrorDtoMessageUnion1TypeStr

	return ErrorDtoMessageUnion1{
		Str:  &str,
		Type: typ,
	}
}

func CreateErrorDtoMessageUnion1Number(number float64) ErrorDtoMessageUnion1 {
	typ := ErrorDtoMessageUnion1TypeNumber

	return ErrorDtoMessageUnion1{
		Number: &number,
		Type:   typ,
	}
}

func CreateErrorDtoMessageUnion1Boolean(boolean bool) ErrorDtoMessageUnion1 {
	typ := ErrorDtoMessageUnion1TypeBoolean

	return ErrorDtoMessageUnion1{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateErrorDtoMessageUnion1MapOfAny(mapOfAny map[string]any) ErrorDtoMessageUnion1 {
	typ := ErrorDtoMessageUnion1TypeMapOfAny

	return ErrorDtoMessageUnion1{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *ErrorDtoMessageUnion1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ErrorDtoMessageUnion1TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ErrorDtoMessageUnion1TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ErrorDtoMessageUnion1TypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ErrorDtoMessageUnion1TypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ErrorDtoMessageUnion1", string(data))
}

func (u ErrorDtoMessageUnion1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type ErrorDtoMessageUnion1: all fields are null")
}

type ErrorDtoMessage struct {
}

type ErrorDtoMessageUnion2Type string

const (
	ErrorDtoMessageUnion2TypeStr                          ErrorDtoMessageUnion2Type = "str"
	ErrorDtoMessageUnion2TypeNumber                       ErrorDtoMessageUnion2Type = "number"
	ErrorDtoMessageUnion2TypeBoolean                      ErrorDtoMessageUnion2Type = "boolean"
	ErrorDtoMessageUnion2TypeErrorDtoMessage              ErrorDtoMessageUnion2Type = "ErrorDto_message"
	ErrorDtoMessageUnion2TypeArrayOfErrorDtoMessageUnion1 ErrorDtoMessageUnion2Type = "arrayOfErrorDtoMessageUnion1"
)

// ErrorDtoMessageUnion2 - Value that failed validation
type ErrorDtoMessageUnion2 struct {
	Str                          *string                  `queryParam:"inline"`
	Number                       *float64                 `queryParam:"inline"`
	Boolean                      *bool                    `queryParam:"inline"`
	ErrorDtoMessage              *ErrorDtoMessage         `queryParam:"inline"`
	ArrayOfErrorDtoMessageUnion1 []*ErrorDtoMessageUnion1 `queryParam:"inline"`

	Type ErrorDtoMessageUnion2Type
}

func CreateErrorDtoMessageUnion2Str(str string) ErrorDtoMessageUnion2 {
	typ := ErrorDtoMessageUnion2TypeStr

	return ErrorDtoMessageUnion2{
		Str:  &str,
		Type: typ,
	}
}

func CreateErrorDtoMessageUnion2Number(number float64) ErrorDtoMessageUnion2 {
	typ := ErrorDtoMessageUnion2TypeNumber

	return ErrorDtoMessageUnion2{
		Number: &number,
		Type:   typ,
	}
}

func CreateErrorDtoMessageUnion2Boolean(boolean bool) ErrorDtoMessageUnion2 {
	typ := ErrorDtoMessageUnion2TypeBoolean

	return ErrorDtoMessageUnion2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateErrorDtoMessageUnion2ErrorDtoMessage(errorDtoMessage ErrorDtoMessage) ErrorDtoMessageUnion2 {
	typ := ErrorDtoMessageUnion2TypeErrorDtoMessage

	return ErrorDtoMessageUnion2{
		ErrorDtoMessage: &errorDtoMessage,
		Type:            typ,
	}
}

func CreateErrorDtoMessageUnion2ArrayOfErrorDtoMessageUnion1(arrayOfErrorDtoMessageUnion1 []*ErrorDtoMessageUnion1) ErrorDtoMessageUnion2 {
	typ := ErrorDtoMessageUnion2TypeArrayOfErrorDtoMessageUnion1

	return ErrorDtoMessageUnion2{
		ArrayOfErrorDtoMessageUnion1: arrayOfErrorDtoMessageUnion1,
		Type:                         typ,
	}
}

func (u *ErrorDtoMessageUnion2) UnmarshalJSON(data []byte) error {

	var errorDtoMessage ErrorDtoMessage = ErrorDtoMessage{}
	if err := utils.UnmarshalJSON(data, &errorDtoMessage, "", true, true); err == nil {
		u.ErrorDtoMessage = &errorDtoMessage
		u.Type = ErrorDtoMessageUnion2TypeErrorDtoMessage
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ErrorDtoMessageUnion2TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ErrorDtoMessageUnion2TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ErrorDtoMessageUnion2TypeBoolean
		return nil
	}

	var arrayOfErrorDtoMessageUnion1 []*ErrorDtoMessageUnion1 = []*ErrorDtoMessageUnion1{}
	if err := utils.UnmarshalJSON(data, &arrayOfErrorDtoMessageUnion1, "", true, true); err == nil {
		u.ArrayOfErrorDtoMessageUnion1 = arrayOfErrorDtoMessageUnion1
		u.Type = ErrorDtoMessageUnion2TypeArrayOfErrorDtoMessageUnion1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ErrorDtoMessageUnion2", string(data))
}

func (u ErrorDtoMessageUnion2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ErrorDtoMessage != nil {
		return utils.MarshalJSON(u.ErrorDtoMessage, "", true)
	}

	if u.ArrayOfErrorDtoMessageUnion1 != nil {
		return utils.MarshalJSON(u.ArrayOfErrorDtoMessageUnion1, "", true)
	}

	return nil, errors.New("could not marshal union type ErrorDtoMessageUnion2: all fields are null")
}
