// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type ConstraintValidationValueUnion1Type string

const (
	ConstraintValidationValueUnion1TypeStr      ConstraintValidationValueUnion1Type = "str"
	ConstraintValidationValueUnion1TypeNumber   ConstraintValidationValueUnion1Type = "number"
	ConstraintValidationValueUnion1TypeBoolean  ConstraintValidationValueUnion1Type = "boolean"
	ConstraintValidationValueUnion1TypeMapOfAny ConstraintValidationValueUnion1Type = "mapOfAny"
)

type ConstraintValidationValueUnion1 struct {
	Str      *string        `queryParam:"inline"`
	Number   *float64       `queryParam:"inline"`
	Boolean  *bool          `queryParam:"inline"`
	MapOfAny map[string]any `queryParam:"inline"`

	Type ConstraintValidationValueUnion1Type
}

func CreateConstraintValidationValueUnion1Str(str string) ConstraintValidationValueUnion1 {
	typ := ConstraintValidationValueUnion1TypeStr

	return ConstraintValidationValueUnion1{
		Str:  &str,
		Type: typ,
	}
}

func CreateConstraintValidationValueUnion1Number(number float64) ConstraintValidationValueUnion1 {
	typ := ConstraintValidationValueUnion1TypeNumber

	return ConstraintValidationValueUnion1{
		Number: &number,
		Type:   typ,
	}
}

func CreateConstraintValidationValueUnion1Boolean(boolean bool) ConstraintValidationValueUnion1 {
	typ := ConstraintValidationValueUnion1TypeBoolean

	return ConstraintValidationValueUnion1{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateConstraintValidationValueUnion1MapOfAny(mapOfAny map[string]any) ConstraintValidationValueUnion1 {
	typ := ConstraintValidationValueUnion1TypeMapOfAny

	return ConstraintValidationValueUnion1{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *ConstraintValidationValueUnion1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ConstraintValidationValueUnion1TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ConstraintValidationValueUnion1TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ConstraintValidationValueUnion1TypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ConstraintValidationValueUnion1TypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ConstraintValidationValueUnion1", string(data))
}

func (u ConstraintValidationValueUnion1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type ConstraintValidationValueUnion1: all fields are null")
}

type ConstraintValidationValue struct {
}

type ConstraintValidationValueUnion2Type string

const (
	ConstraintValidationValueUnion2TypeStr                                    ConstraintValidationValueUnion2Type = "str"
	ConstraintValidationValueUnion2TypeNumber                                 ConstraintValidationValueUnion2Type = "number"
	ConstraintValidationValueUnion2TypeBoolean                                ConstraintValidationValueUnion2Type = "boolean"
	ConstraintValidationValueUnion2TypeConstraintValidationValue              ConstraintValidationValueUnion2Type = "ConstraintValidation_value"
	ConstraintValidationValueUnion2TypeArrayOfConstraintValidationValueUnion1 ConstraintValidationValueUnion2Type = "arrayOfConstraintValidationValueUnion1"
)

// ConstraintValidationValueUnion2 - Value that failed validation
type ConstraintValidationValueUnion2 struct {
	Str                                    *string                            `queryParam:"inline"`
	Number                                 *float64                           `queryParam:"inline"`
	Boolean                                *bool                              `queryParam:"inline"`
	ConstraintValidationValue              *ConstraintValidationValue         `queryParam:"inline"`
	ArrayOfConstraintValidationValueUnion1 []*ConstraintValidationValueUnion1 `queryParam:"inline"`

	Type ConstraintValidationValueUnion2Type
}

func CreateConstraintValidationValueUnion2Str(str string) ConstraintValidationValueUnion2 {
	typ := ConstraintValidationValueUnion2TypeStr

	return ConstraintValidationValueUnion2{
		Str:  &str,
		Type: typ,
	}
}

func CreateConstraintValidationValueUnion2Number(number float64) ConstraintValidationValueUnion2 {
	typ := ConstraintValidationValueUnion2TypeNumber

	return ConstraintValidationValueUnion2{
		Number: &number,
		Type:   typ,
	}
}

func CreateConstraintValidationValueUnion2Boolean(boolean bool) ConstraintValidationValueUnion2 {
	typ := ConstraintValidationValueUnion2TypeBoolean

	return ConstraintValidationValueUnion2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateConstraintValidationValueUnion2ConstraintValidationValue(constraintValidationValue ConstraintValidationValue) ConstraintValidationValueUnion2 {
	typ := ConstraintValidationValueUnion2TypeConstraintValidationValue

	return ConstraintValidationValueUnion2{
		ConstraintValidationValue: &constraintValidationValue,
		Type:                      typ,
	}
}

func CreateConstraintValidationValueUnion2ArrayOfConstraintValidationValueUnion1(arrayOfConstraintValidationValueUnion1 []*ConstraintValidationValueUnion1) ConstraintValidationValueUnion2 {
	typ := ConstraintValidationValueUnion2TypeArrayOfConstraintValidationValueUnion1

	return ConstraintValidationValueUnion2{
		ArrayOfConstraintValidationValueUnion1: arrayOfConstraintValidationValueUnion1,
		Type:                                   typ,
	}
}

func (u *ConstraintValidationValueUnion2) UnmarshalJSON(data []byte) error {

	var constraintValidationValue ConstraintValidationValue = ConstraintValidationValue{}
	if err := utils.UnmarshalJSON(data, &constraintValidationValue, "", true, true); err == nil {
		u.ConstraintValidationValue = &constraintValidationValue
		u.Type = ConstraintValidationValueUnion2TypeConstraintValidationValue
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ConstraintValidationValueUnion2TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ConstraintValidationValueUnion2TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ConstraintValidationValueUnion2TypeBoolean
		return nil
	}

	var arrayOfConstraintValidationValueUnion1 []*ConstraintValidationValueUnion1 = []*ConstraintValidationValueUnion1{}
	if err := utils.UnmarshalJSON(data, &arrayOfConstraintValidationValueUnion1, "", true, true); err == nil {
		u.ArrayOfConstraintValidationValueUnion1 = arrayOfConstraintValidationValueUnion1
		u.Type = ConstraintValidationValueUnion2TypeArrayOfConstraintValidationValueUnion1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ConstraintValidationValueUnion2", string(data))
}

func (u ConstraintValidationValueUnion2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ConstraintValidationValue != nil {
		return utils.MarshalJSON(u.ConstraintValidationValue, "", true)
	}

	if u.ArrayOfConstraintValidationValueUnion1 != nil {
		return utils.MarshalJSON(u.ArrayOfConstraintValidationValueUnion1, "", true)
	}

	return nil, errors.New("could not marshal union type ConstraintValidationValueUnion2: all fields are null")
}

type ConstraintValidation struct {
	// List of validation error messages
	Messages []string `json:"messages"`
	// Value that failed validation
	Value *ConstraintValidationValueUnion2 `json:"value,omitempty"`
}

func (o *ConstraintValidation) GetMessages() []string {
	if o == nil {
		return []string{}
	}
	return o.Messages
}

func (o *ConstraintValidation) GetValue() *ConstraintValidationValueUnion2 {
	if o == nil {
		return nil
	}
	return o.Value
}
