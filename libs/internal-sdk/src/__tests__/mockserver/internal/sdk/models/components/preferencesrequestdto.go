// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type PreferencesRequestDtoWorkflowPreferencesDtoAllType string

const (
	PreferencesRequestDtoWorkflowPreferencesDtoAllTypeWorkflowPreferenceDto PreferencesRequestDtoWorkflowPreferencesDtoAllType = "WorkflowPreferenceDto"
)

// PreferencesRequestDtoWorkflowPreferencesDtoAll - A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
type PreferencesRequestDtoWorkflowPreferencesDtoAll struct {
	WorkflowPreferenceDto *WorkflowPreferenceDto `queryParam:"inline"`

	Type PreferencesRequestDtoWorkflowPreferencesDtoAllType
}

func CreatePreferencesRequestDtoWorkflowPreferencesDtoAllWorkflowPreferenceDto(workflowPreferenceDto WorkflowPreferenceDto) PreferencesRequestDtoWorkflowPreferencesDtoAll {
	typ := PreferencesRequestDtoWorkflowPreferencesDtoAllTypeWorkflowPreferenceDto

	return PreferencesRequestDtoWorkflowPreferencesDtoAll{
		WorkflowPreferenceDto: &workflowPreferenceDto,
		Type:                  typ,
	}
}

func (u *PreferencesRequestDtoWorkflowPreferencesDtoAll) UnmarshalJSON(data []byte) error {

	var workflowPreferenceDto WorkflowPreferenceDto = WorkflowPreferenceDto{}
	if err := utils.UnmarshalJSON(data, &workflowPreferenceDto, "", true, true); err == nil {
		u.WorkflowPreferenceDto = &workflowPreferenceDto
		u.Type = PreferencesRequestDtoWorkflowPreferencesDtoAllTypeWorkflowPreferenceDto
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PreferencesRequestDtoWorkflowPreferencesDtoAll", string(data))
}

func (u PreferencesRequestDtoWorkflowPreferencesDtoAll) MarshalJSON() ([]byte, error) {
	if u.WorkflowPreferenceDto != nil {
		return utils.MarshalJSON(u.WorkflowPreferenceDto, "", true)
	}

	return nil, errors.New("could not marshal union type PreferencesRequestDtoWorkflowPreferencesDtoAll: all fields are null")
}

type PreferencesRequestDtoWorkflowPreferencesDto struct {
	// A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
	All PreferencesRequestDtoWorkflowPreferencesDtoAll `json:"all"`
	// Preferences for different communication channels
	Channels map[string]ChannelPreferenceDto `json:"channels"`
}

func (o *PreferencesRequestDtoWorkflowPreferencesDto) GetAll() PreferencesRequestDtoWorkflowPreferencesDtoAll {
	if o == nil {
		return PreferencesRequestDtoWorkflowPreferencesDtoAll{}
	}
	return o.All
}

func (o *PreferencesRequestDtoWorkflowPreferencesDto) GetChannels() map[string]ChannelPreferenceDto {
	if o == nil {
		return map[string]ChannelPreferenceDto{}
	}
	return o.Channels
}

type UserType string

const (
	UserTypePreferencesRequestDtoWorkflowPreferencesDto UserType = "PreferencesRequestDto_WorkflowPreferencesDto"
)

// User workflow preferences
type User struct {
	PreferencesRequestDtoWorkflowPreferencesDto *PreferencesRequestDtoWorkflowPreferencesDto `queryParam:"inline"`

	Type UserType
}

func CreateUserPreferencesRequestDtoWorkflowPreferencesDto(preferencesRequestDtoWorkflowPreferencesDto PreferencesRequestDtoWorkflowPreferencesDto) User {
	typ := UserTypePreferencesRequestDtoWorkflowPreferencesDto

	return User{
		PreferencesRequestDtoWorkflowPreferencesDto: &preferencesRequestDtoWorkflowPreferencesDto,
		Type: typ,
	}
}

func (u *User) UnmarshalJSON(data []byte) error {

	var preferencesRequestDtoWorkflowPreferencesDto PreferencesRequestDtoWorkflowPreferencesDto = PreferencesRequestDtoWorkflowPreferencesDto{}
	if err := utils.UnmarshalJSON(data, &preferencesRequestDtoWorkflowPreferencesDto, "", true, true); err == nil {
		u.PreferencesRequestDtoWorkflowPreferencesDto = &preferencesRequestDtoWorkflowPreferencesDto
		u.Type = UserTypePreferencesRequestDtoWorkflowPreferencesDto
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for User", string(data))
}

func (u User) MarshalJSON() ([]byte, error) {
	if u.PreferencesRequestDtoWorkflowPreferencesDto != nil {
		return utils.MarshalJSON(u.PreferencesRequestDtoWorkflowPreferencesDto, "", true)
	}

	return nil, errors.New("could not marshal union type User: all fields are null")
}

type WorkflowAllType string

const (
	WorkflowAllTypeWorkflowPreferenceDto WorkflowAllType = "WorkflowPreferenceDto"
)

// WorkflowAll - A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
type WorkflowAll struct {
	WorkflowPreferenceDto *WorkflowPreferenceDto `queryParam:"inline"`

	Type WorkflowAllType
}

func CreateWorkflowAllWorkflowPreferenceDto(workflowPreferenceDto WorkflowPreferenceDto) WorkflowAll {
	typ := WorkflowAllTypeWorkflowPreferenceDto

	return WorkflowAll{
		WorkflowPreferenceDto: &workflowPreferenceDto,
		Type:                  typ,
	}
}

func (u *WorkflowAll) UnmarshalJSON(data []byte) error {

	var workflowPreferenceDto WorkflowPreferenceDto = WorkflowPreferenceDto{}
	if err := utils.UnmarshalJSON(data, &workflowPreferenceDto, "", true, true); err == nil {
		u.WorkflowPreferenceDto = &workflowPreferenceDto
		u.Type = WorkflowAllTypeWorkflowPreferenceDto
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for WorkflowAll", string(data))
}

func (u WorkflowAll) MarshalJSON() ([]byte, error) {
	if u.WorkflowPreferenceDto != nil {
		return utils.MarshalJSON(u.WorkflowPreferenceDto, "", true)
	}

	return nil, errors.New("could not marshal union type WorkflowAll: all fields are null")
}

// Workflow - Workflow-specific preferences
type Workflow struct {
	// A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
	All WorkflowAll `json:"all"`
	// Preferences for different communication channels
	Channels map[string]ChannelPreferenceDto `json:"channels"`
}

func (o *Workflow) GetAll() WorkflowAll {
	if o == nil {
		return WorkflowAll{}
	}
	return o.All
}

func (o *Workflow) GetChannels() map[string]ChannelPreferenceDto {
	if o == nil {
		return map[string]ChannelPreferenceDto{}
	}
	return o.Channels
}

type PreferencesRequestDto struct {
	// User workflow preferences
	User *User `json:"user,omitempty"`
	// Workflow-specific preferences
	Workflow *Workflow `json:"workflow,omitempty"`
}

func (o *PreferencesRequestDto) GetUser() *User {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *PreferencesRequestDto) GetWorkflow() *Workflow {
	if o == nil {
		return nil
	}
	return o.Workflow
}
