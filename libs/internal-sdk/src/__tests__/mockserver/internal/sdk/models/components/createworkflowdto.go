// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type CreateWorkflowDtoStepType string

const (
	CreateWorkflowDtoStepTypeInApp  CreateWorkflowDtoStepType = "in_app"
	CreateWorkflowDtoStepTypeEmail  CreateWorkflowDtoStepType = "email"
	CreateWorkflowDtoStepTypeSms    CreateWorkflowDtoStepType = "sms"
	CreateWorkflowDtoStepTypePush   CreateWorkflowDtoStepType = "push"
	CreateWorkflowDtoStepTypeChat   CreateWorkflowDtoStepType = "chat"
	CreateWorkflowDtoStepTypeDelay  CreateWorkflowDtoStepType = "delay"
	CreateWorkflowDtoStepTypeDigest CreateWorkflowDtoStepType = "digest"
	CreateWorkflowDtoStepTypeCustom CreateWorkflowDtoStepType = "custom"
)

type CreateWorkflowDtoStep struct {
	InAppStepUpsertDto  *InAppStepUpsertDto  `queryParam:"inline"`
	EmailStepUpsertDto  *EmailStepUpsertDto  `queryParam:"inline"`
	SmsStepUpsertDto    *SmsStepUpsertDto    `queryParam:"inline"`
	PushStepUpsertDto   *PushStepUpsertDto   `queryParam:"inline"`
	ChatStepUpsertDto   *ChatStepUpsertDto   `queryParam:"inline"`
	DelayStepUpsertDto  *DelayStepUpsertDto  `queryParam:"inline"`
	DigestStepUpsertDto *DigestStepUpsertDto `queryParam:"inline"`
	CustomStepUpsertDto *CustomStepUpsertDto `queryParam:"inline"`

	Type CreateWorkflowDtoStepType
}

func CreateCreateWorkflowDtoStepInApp(inApp InAppStepUpsertDto) CreateWorkflowDtoStep {
	typ := CreateWorkflowDtoStepTypeInApp

	typStr := StepTypeEnum(typ)
	inApp.Type = typStr

	return CreateWorkflowDtoStep{
		InAppStepUpsertDto: &inApp,
		Type:               typ,
	}
}

func CreateCreateWorkflowDtoStepEmail(email EmailStepUpsertDto) CreateWorkflowDtoStep {
	typ := CreateWorkflowDtoStepTypeEmail

	typStr := StepTypeEnum(typ)
	email.Type = typStr

	return CreateWorkflowDtoStep{
		EmailStepUpsertDto: &email,
		Type:               typ,
	}
}

func CreateCreateWorkflowDtoStepSms(sms SmsStepUpsertDto) CreateWorkflowDtoStep {
	typ := CreateWorkflowDtoStepTypeSms

	typStr := StepTypeEnum(typ)
	sms.Type = typStr

	return CreateWorkflowDtoStep{
		SmsStepUpsertDto: &sms,
		Type:             typ,
	}
}

func CreateCreateWorkflowDtoStepPush(push PushStepUpsertDto) CreateWorkflowDtoStep {
	typ := CreateWorkflowDtoStepTypePush

	typStr := StepTypeEnum(typ)
	push.Type = typStr

	return CreateWorkflowDtoStep{
		PushStepUpsertDto: &push,
		Type:              typ,
	}
}

func CreateCreateWorkflowDtoStepChat(chat ChatStepUpsertDto) CreateWorkflowDtoStep {
	typ := CreateWorkflowDtoStepTypeChat

	typStr := StepTypeEnum(typ)
	chat.Type = typStr

	return CreateWorkflowDtoStep{
		ChatStepUpsertDto: &chat,
		Type:              typ,
	}
}

func CreateCreateWorkflowDtoStepDelay(delay DelayStepUpsertDto) CreateWorkflowDtoStep {
	typ := CreateWorkflowDtoStepTypeDelay

	typStr := StepTypeEnum(typ)
	delay.Type = typStr

	return CreateWorkflowDtoStep{
		DelayStepUpsertDto: &delay,
		Type:               typ,
	}
}

func CreateCreateWorkflowDtoStepDigest(digest DigestStepUpsertDto) CreateWorkflowDtoStep {
	typ := CreateWorkflowDtoStepTypeDigest

	typStr := StepTypeEnum(typ)
	digest.Type = typStr

	return CreateWorkflowDtoStep{
		DigestStepUpsertDto: &digest,
		Type:                typ,
	}
}

func CreateCreateWorkflowDtoStepCustom(custom CustomStepUpsertDto) CreateWorkflowDtoStep {
	typ := CreateWorkflowDtoStepTypeCustom

	typStr := StepTypeEnum(typ)
	custom.Type = typStr

	return CreateWorkflowDtoStep{
		CustomStepUpsertDto: &custom,
		Type:                typ,
	}
}

func (u *CreateWorkflowDtoStep) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "in_app":
		inAppStepUpsertDto := new(InAppStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &inAppStepUpsertDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == in_app) type InAppStepUpsertDto within CreateWorkflowDtoStep: %w", string(data), err)
		}

		u.InAppStepUpsertDto = inAppStepUpsertDto
		u.Type = CreateWorkflowDtoStepTypeInApp
		return nil
	case "email":
		emailStepUpsertDto := new(EmailStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &emailStepUpsertDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == email) type EmailStepUpsertDto within CreateWorkflowDtoStep: %w", string(data), err)
		}

		u.EmailStepUpsertDto = emailStepUpsertDto
		u.Type = CreateWorkflowDtoStepTypeEmail
		return nil
	case "sms":
		smsStepUpsertDto := new(SmsStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &smsStepUpsertDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sms) type SmsStepUpsertDto within CreateWorkflowDtoStep: %w", string(data), err)
		}

		u.SmsStepUpsertDto = smsStepUpsertDto
		u.Type = CreateWorkflowDtoStepTypeSms
		return nil
	case "push":
		pushStepUpsertDto := new(PushStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &pushStepUpsertDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == push) type PushStepUpsertDto within CreateWorkflowDtoStep: %w", string(data), err)
		}

		u.PushStepUpsertDto = pushStepUpsertDto
		u.Type = CreateWorkflowDtoStepTypePush
		return nil
	case "chat":
		chatStepUpsertDto := new(ChatStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &chatStepUpsertDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == chat) type ChatStepUpsertDto within CreateWorkflowDtoStep: %w", string(data), err)
		}

		u.ChatStepUpsertDto = chatStepUpsertDto
		u.Type = CreateWorkflowDtoStepTypeChat
		return nil
	case "delay":
		delayStepUpsertDto := new(DelayStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &delayStepUpsertDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == delay) type DelayStepUpsertDto within CreateWorkflowDtoStep: %w", string(data), err)
		}

		u.DelayStepUpsertDto = delayStepUpsertDto
		u.Type = CreateWorkflowDtoStepTypeDelay
		return nil
	case "digest":
		digestStepUpsertDto := new(DigestStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &digestStepUpsertDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == digest) type DigestStepUpsertDto within CreateWorkflowDtoStep: %w", string(data), err)
		}

		u.DigestStepUpsertDto = digestStepUpsertDto
		u.Type = CreateWorkflowDtoStepTypeDigest
		return nil
	case "custom":
		customStepUpsertDto := new(CustomStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &customStepUpsertDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == custom) type CustomStepUpsertDto within CreateWorkflowDtoStep: %w", string(data), err)
		}

		u.CustomStepUpsertDto = customStepUpsertDto
		u.Type = CreateWorkflowDtoStepTypeCustom
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateWorkflowDtoStep", string(data))
}

func (u CreateWorkflowDtoStep) MarshalJSON() ([]byte, error) {
	if u.InAppStepUpsertDto != nil {
		return utils.MarshalJSON(u.InAppStepUpsertDto, "", true)
	}

	if u.EmailStepUpsertDto != nil {
		return utils.MarshalJSON(u.EmailStepUpsertDto, "", true)
	}

	if u.SmsStepUpsertDto != nil {
		return utils.MarshalJSON(u.SmsStepUpsertDto, "", true)
	}

	if u.PushStepUpsertDto != nil {
		return utils.MarshalJSON(u.PushStepUpsertDto, "", true)
	}

	if u.ChatStepUpsertDto != nil {
		return utils.MarshalJSON(u.ChatStepUpsertDto, "", true)
	}

	if u.DelayStepUpsertDto != nil {
		return utils.MarshalJSON(u.DelayStepUpsertDto, "", true)
	}

	if u.DigestStepUpsertDto != nil {
		return utils.MarshalJSON(u.DigestStepUpsertDto, "", true)
	}

	if u.CustomStepUpsertDto != nil {
		return utils.MarshalJSON(u.CustomStepUpsertDto, "", true)
	}

	return nil, errors.New("could not marshal union type CreateWorkflowDtoStep: all fields are null")
}

type CreateWorkflowDto struct {
	// Name of the workflow
	Name string `json:"name"`
	// Description of the workflow
	Description *string `json:"description,omitempty"`
	// Tags associated with the workflow
	Tags []string `json:"tags,omitempty"`
	// Whether the workflow is active
	Active *bool `default:"false" json:"active"`
	// Unique identifier for the workflow
	WorkflowID string `json:"workflowId"`
	// Steps of the workflow
	Steps []CreateWorkflowDtoStep `json:"steps"`
	// Source of workflow creation
	Source *WorkflowCreationSourceEnum `default:"editor" json:"__source"`
	// Workflow preferences
	Preferences *PreferencesRequestDto `json:"preferences,omitempty"`
	// The payload JSON Schema for the workflow
	PayloadSchema map[string]any `json:"payloadSchema,omitempty"`
	// Enable or disable payload schema validation
	ValidatePayload *bool `json:"validatePayload,omitempty"`
}

func (c CreateWorkflowDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateWorkflowDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateWorkflowDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateWorkflowDto) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateWorkflowDto) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateWorkflowDto) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *CreateWorkflowDto) GetWorkflowID() string {
	if o == nil {
		return ""
	}
	return o.WorkflowID
}

func (o *CreateWorkflowDto) GetSteps() []CreateWorkflowDtoStep {
	if o == nil {
		return []CreateWorkflowDtoStep{}
	}
	return o.Steps
}

func (o *CreateWorkflowDto) GetSource() *WorkflowCreationSourceEnum {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CreateWorkflowDto) GetPreferences() *PreferencesRequestDto {
	if o == nil {
		return nil
	}
	return o.Preferences
}

func (o *CreateWorkflowDto) GetPayloadSchema() map[string]any {
	if o == nil {
		return nil
	}
	return o.PayloadSchema
}

func (o *CreateWorkflowDto) GetValidatePayload() *bool {
	if o == nil {
		return nil
	}
	return o.ValidatePayload
}
